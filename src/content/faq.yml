title: FAQ
body:
  - h1: FAQ

  - p: >
      This is a collection of common questions about esbuild. You can also
      ask questions on the [GitHub issue tracker](https://github.com/evanw/esbuild/issues).

  - toc: true

  - h2: Why is esbuild fast?

  - p: >
      Several reasons:

  - ul:
    - >
      <p>
      It's written in [Go](https://golang.org/) and compiles to native code.
      </p>
      <p>
      Most other bundlers are written in JavaScript, but a command-line
      application is a worst-case performance situation for a JIT-compiled
      language. Every time you run your bundler, the JavaScript VM is seeing
      your bundler's code for the first time without any optimization hints.
      While esbuild is busy parsing your JavaScript, node is busy parsing
      your bundler's JavaScript. By the time node has finished parsing your
      bundler's code, esbuild might have already exited and your bundler
      hasn't even started bundling yet.
      </p>
      <p>
      In addition, Go is designed from the core for parallelism while JavaScript
      is not. Go has shared memory between threads while JavaScript has to
      serialize data between threads. Both Go and JavaScript have parallel
      garbage collectors, but Go's heap is shared between all threads while
      JavaScript has a separate heap per JavaScript thread. This seems to cut
      the amount of parallelism that's possible with JavaScript worker threads
      in half [according to my testing](https://github.com/evanw/esbuild/issues/111#issuecomment-719910381),
      presumably since half of your CPU cores are busy collecting garbage for
      the other half.
      </p>

    - >
      <p>
      Parallelism is used heavily.
      </p>
      <p>
      The algorithms inside esbuild are carefully designed to fully saturate
      all available CPU cores when possible. There are roughly three phases:
      parsing, linking, and code generation. Parsing and code generation are
      most of the work and are fully parallelizable (linking is an inherently
      serial task for the most part). Since all threads share memory, work
      can easily be shared when bundling different entry points that import
      the same JavaScript libraries. Most modern computers have many cores
      so parallelism is a big win.
      </p>

    - >
      <p>
      Everything in esbuild is written from scratch.
      </p>
      <p>
      There are a lot of performance benefits with writing everything yourself
      instead of using 3rd-party libraries. You can have performance in mind
      from the beginning, you can make sure everything uses consistent data
      structures to avoid expensive conversions, and you can make wide
      architectural changes whenever necessary. The drawback is of course that
      it's a lot of work.
      </p>
      <p>
      For example, many bundlers use the official TypeScript compiler as a
      parser. But it was built to serve the goals of the TypeScript compiler team
      and they do not have performance as a top priority. Their code makes pretty
      heavy use of [megamorphic object shapes](https://mrale.ph/blog/2015/01/11/whats-up-with-monomorphism.html)
      and unnecessary [dynamic property accesses](https://github.com/microsoft/TypeScript/issues/39247)
      (both well-known JavaScript speed bumps). And the TypeScript parser
      appears to still run the type checker even when type checking is disabled.
      None of these are an issue with esbuild's custom TypeScript parser.
      </p>

    - >
      <p>
      Memory is used efficiently.
      </p>
      <p>
      Compilers are ideally mostly O(n) complexity in the length of the input.
      So if you are processing a lot of data, memory access speed is likely going
      to heavily affect performance. The fewer passes you have to make over your
      data (and also the fewer different representations you need to transform
      your data into), the faster your compiler will go.
      </p>
      <p>
      For example, esbuild only touches the whole JavaScript AST three times:
      </p>
      <ol>
      <li>A pass for lexing, parsing, scope setup, and declaring symbols</li>
      <li>A pass for binding symbols, minifying syntax, JSX/TS to JS, and ESNext-to-ES2015</li>
      <li>A pass for minifying identifiers, minifying whitespace, generating code, and generating source maps</li>
      </ol>
      <p>
      This maximizes reuse of AST data while it's still hot in the CPU cache.
      Other bundlers do these steps in separate passes instead of interleaving
      them. They may also convert between data representations to glue multiple
      libraries together (e.g. string→TS→JS→string, then string→JS→older JS→string,
      then string→JS→minified JS→string) which uses more memory and slows
      things down.
      </p>
      <p>
      Another benefit of Go is that it can store things compactly in memory,
      which enables it to use less memory and fit more in the CPU cache. All
      object fields have types and fields are packed tightly together so e.g.
      several boolean flags only take one byte each. Go also has value semantics
      and can embed one object directly in another so it comes "for free"
      without another allocation. JavaScript doesn't have these features and
      also has other drawbacks such as JIT overhead (e.g. hidden class slots)
      and inefficient representations (e.g. non-integer numbers are
      heap-allocated with pointers).
      </p>

  - p: >
      Each one of these factors is only a somewhat significant speedup, but
      together they can result in a bundler that is multiple orders of
      magnitude faster than other bundlers commonly in use today.

  - h2: Benchmark details

  - p: >
      Here are the details about each benchmark:

  - figcaption: JavaScript benchmark
  - benchmark:
      '[esbuild](https://github.com/evanw/esbuild)': 0.37
      '[esbuild](https://github.com/evanw/esbuild) (1 thread)': 1.61
      '[rollup](https://github.com/rollup/rollup) + [terser](https://github.com/terser/terser)': 37.79
      '[parcel](https://github.com/parcel-bundler/parcel) 2': 39.28
      '[webpack](https://github.com/webpack/webpack) 4': 43.07
      '[webpack](https://github.com/webpack/webpack) 5': 55.25

  - p: >
      This benchmark approximates a large JavaScript codebase by duplicating
      the [three.js](https://github.com/mrdoob/three.js) library 10 times
      and building a single bundle from scratch, without any caches. The
      benchmark can be run with `make bench-three` in the
      [esbuild repo](https://github.com/evanw/esbuild).

  - table: |
      | Bundler            |    Time | Relative slowdown | Absolute speed | Output size |
      | :----------------- | ------: | ----------------: | -------------: | ----------: |
      | esbuild            |   0.37s |                1x |  1479.6 kloc/s |      5.81mb |
      | esbuild (1 thread) |   1.61s |                4x |   340.0 kloc/s |      5.81mb |
      | rollup + terser    |  37.79s |              102x |    14.5 kloc/s |      5.81mb |
      | parcel 2           |  39.28s |              106x |    13.9 kloc/s |      5.87mb |
      | webpack 4          |  43.07s |              116x |    12.7 kloc/s |      5.97mb |
      | webpack 5          |  55.25s |              149x |     9.9 kloc/s |      5.84mb |

  - p: >
      Each time reported is the best of three runs. I'm running esbuild with
      <code>--bundle <wbr>--minify <wbr>--sourcemap</code> (the
      single-threaded version uses `GOMAXPROCS=1`). I used the
      <code>rollup-<wbr>plugin-<wbr>terser</code> plugin because Rollup
      itself doesn't support minification. Webpack uses
      <code>--mode=<wbr>production <wbr>--devtool=<wbr>sourcemap</code>.
      Parcel 2 uses the default options (Parcel 1 isn't included because the
      generated code crashes on startup). Absolute speed is based on the total
      line count including comments and blank lines, which is currently 547,441.
      The tests were done on a 6-core 2019 MacBook Pro with 16gb of RAM.

  - figcaption: TypeScript benchmark
  - benchmark:
      '[esbuild](https://github.com/evanw/esbuild)': 0.11
      '[esbuild](https://github.com/evanw/esbuild) (1 thread)': 0.40
      '[webpack](https://github.com/webpack/webpack) 4': 19.14
      '[parcel](https://github.com/parcel-bundler/parcel) 1': 22.41
      '[webpack](https://github.com/webpack/webpack) 5': 25.61
      '[parcel](https://github.com/parcel-bundler/parcel) 2': 31.39

  - p: >
      This benchmark uses the [Rome](https://github.com/facebookexperimental/rome)
      build tool to approximate a large TypeScript codebase. All code must be
      combined into a single minified bundle with source maps and the resulting
      bundle must work correctly. The benchmark can be run with `make bench-rome`
      in the [esbuild repo](https://github.com/evanw/esbuild).

  - table: |
      | Bundler            |    Time | Relative slowdown | Absolute speed | Output size |
      | :----------------- | ------: | ----------------: | -------------: | ----------: |
      | esbuild            |   0.11s |                1x |  1198.5 kloc/s |      0.97mb |
      | esbuild (1 thread) |   0.40s |                4x |   329.6 kloc/s |      0.97mb |
      | webpack 4          |  19.14s |              174x |     6.9 kloc/s |      1.26mb |
      | parcel 1           |  22.41s |              204x |     5.9 kloc/s |      1.56mb |
      | webpack 5          |  25.61s |              233x |     5.1 kloc/s |      1.26mb |
      | parcel 2           |  31.39s |              285x |     4.2 kloc/s |      0.97mb |

  - p: >
      Each time reported is the best of three runs. I'm running esbuild with
      <code>--bundle <wbr>--minify <wbr>--sourcemap
      <wbr>--platform=<wbr>node</code> (the single-threaded version uses
      `GOMAXPROCS=1`). Webpack uses `ts-loader` with <code>transpileOnly:
      <wbr>true</code> and <code>--mode=<wbr>production
      <wbr>--devtool=<wbr>sourcemap</code>. Parcel 1 uses <code>--target
      <wbr>node --bundle-<wbr>node-<wbr>modules</code>. Parcel 2 uses
      <code>"engines": <wbr>"node"</code> in <code>package.json</code> and
      needs the <code>@parcel/<wbr>transformer-<wbr>typescript-<wbr>tsc</code>
      transformer to be able to handle the TypeScript code used in the
      benchmark. Absolute speed is based on the total line count including
      comments and blank lines, which is currently 131,836. The tests were done
      on a 6-core 2019 MacBook Pro with 16gb of RAM.

  - p: >
      The results don't include Rollup because I couldn't get it to work. I
      tried <code>rollup-<wbr>plugin-<wbr>typescript</code>,
      <code>@rollup/<wbr>plugin-<wbr>typescript</code>, and
      <code>@rollup/<wbr>plugin-<wbr>sucrase</code> and they all didn't work
      for different reasons relating to TypeScript compilation.

  - h2: Upcoming roadmap

  - p: >
      These features are already in progress and are first priority:

  - ul:
    - 'Code splitting ([#16](https://github.com/evanw/esbuild/issues/16), [docs](/api/#splitting))'
    - 'CSS content type ([#20](https://github.com/evanw/esbuild/issues/20), [docs](/content-types/#css))'
    - 'Plugin API ([#111](https://github.com/evanw/esbuild/issues/111))'

  - p: >
      These are potential future features but may not happen or may happen
      to a more limited extent:

  - ul:
    - 'HTML content type ([#31](https://github.com/evanw/esbuild/issues/31))'
    - 'Lowering to ES5 ([#297](https://github.com/evanw/esbuild/issues/297))'
    - 'Bundling top-level await ([#253](https://github.com/evanw/esbuild/issues/253))'

  - p: >
      After that point, I will consider esbuild to be relatively complete.
      I'm planning for esbuild to reach a mostly stable state and then stop
      accumulating more features. This will involve saying "no" to requests
      for adding major features to esbuild itself. I don't think esbuild
      should become an all-in-one solution for all frontend needs. In
      particular, I want to avoid the pain and problems of the "webpack
      config" model where the underlying tool is too flexible and usability
      suffers.

  - p: >
      For example, I am _not_ planning to include these features in esbuild's
      core itself:

  - ul:
    - 'Support for other frontend languages (e.g. [Elm](https://elm-lang.org/),
      [Svelte](https://svelte.dev/), [Vue](https://vuejs.org/),
      [Angular](https://angular.io/))'
    - TypeScript type checking (just run `tsc` separately)
    - An API for custom AST manipulation
    - Hot-module reloading
    - Module federation

  - p: >
      I hope that the extensibility points I'm adding to esbuild
      ([plugins](/plugins/) and the [API](/api/)) will make esbuild useful to
      include as part of more customized build workflows, but I'm not
      intending or expecting these extensibility points to cover all use
      cases. If you have very custom requirements then you should be using
      other tools. I also hope esbuild inspires other build tools to
      dramatically improve performance by overhauling their implementations
      so that everyone can benefit, not just those that use esbuild.

  - p: >
      I am planning to continue to maintain everything in esbuild's existing
      scope even after esbuild reaches stability. This means implementing
      support for newly-released JavaScript and TypeScript syntax features,
      for example.

  - h2: Production readiness

  - p: >
      This project has not yet hit version 1.0.0 and is still in active
      development. That said, it is far beyond the alpha stage and is pretty
      stable. I think of it as a late-stage beta. For some early-adopters
      that means it's good enough to use for real things. Some other people
      think this means esbuild isn't ready yet. This section doesn't try to
      convince you either way. It just tries to give you enough information
      so you can decide for yourself whether you want to use esbuild as your
      bundler.

  - p: >
      Some data points:

  - ul:
    - >
      **Used by other projects**
      <p>
      The API is already being used as a library within some other
      developer tools. For example, [Vite](https://github.com/vitejs/vite)
      and [Snowpack](https://github.com/pikapkg/snowpack) are using
      esbuild's [transform API](/api/#transform-api) to transform
      TypeScript into JavaScript. And [Hugo](https://github.com/gohugoio/hugo)
      is using esbuild's bundler to package JavaScript code during a build.
      I have also heard reports of others using it in production successfully,
      although I don't know the details. I intend to use esbuild in
      production myself once it has enough features but haven't done that yet.
      </p>

    - >
      **API stability**
      <p>
      Even though esbuild's version is not yet 1.0.0, effort is still made to
      keep the API stable. Patch versions are intended for backwards-compatible
      changes and minor versions are intended for backwards-incompatible changes
      (as [recommended by npm](https://docs.npmjs.com/misc/semver)). If you
      plan to use esbuild for something real, you should either pin the exact
      version (maximum safety) or pin the major and minor versions (only accept
      backwards-compatible upgrades).
      </p>

    - >
      **Only one main developer**
      <p>
      This tool is primarily built by [me](https://github.com/evanw). For
      some people this is fine, but for others this means esbuild is not a
      suitable tool for their organization. That's ok with me. I'm building
      esbuild because I find it fun to build and because it's the tool I'd
      want to use. I'm sharing it with the world because there are others
      that want to use it too, because the feedback makes the tool itself
      better, and because I think it will inspire the ecosystem to make
      better tools.
      </p>

    - >
      **Not always open to scope expansion**
      <p>
      I'm not planning on including major features that I'm not interested
      in building and/or maintaining. I also want to limit the project's
      scope so it doesn't get too complex and unwieldy, both from an
      architectural perspective, a testing and correctness perspective, and
      from a usability perspective. Think of esbuild as a "linker" for the
      web. It knows how to transform and bundle JavaScript and CSS. But the
      details of how your source code ends up as plain JavaScript or CSS
      may need to be 3rd-party code.
      </p>
      <p>
      I'm hoping that [plugins](/plugins/) will allow the community to add
      major features (e.g. WebAssembly import) without needing to contribute
      to esbuild itself. However, not everything is exposed in the plugin
      API and it may be the case that it's not possible to add a particular
      feature to esbuild that you may want to add. This is intentional;
      esbuild is not meant to be an all-in-one solution for all frontend
      needs.
      </p>
